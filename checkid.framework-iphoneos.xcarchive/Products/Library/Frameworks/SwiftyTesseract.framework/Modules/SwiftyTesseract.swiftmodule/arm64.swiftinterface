// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SwiftyTesseract
import Combine
import Foundation
import Swift
@_exported import SwiftyTesseract
import UIKit
import _Concurrency
import libtesseract
extension Foundation.Bundle : SwiftyTesseract.LanguageModelDataSource {
  public var pathToTrainedData: Swift.String {
    get
  }
}
public enum EngineMode : libtesseract.TessOcrEngineMode.RawValue {
  case tesseractOnly
  case lstmOnly
  case tesseractLstmCombined
  public init?(rawValue: libtesseract.TessOcrEngineMode.RawValue)
  public typealias RawValue = libtesseract.TessOcrEngineMode.RawValue
  public var rawValue: libtesseract.TessOcrEngineMode.RawValue {
    get
  }
}
public protocol LanguageModelDataSource {
  var pathToTrainedData: Swift.String { get }
}
public enum RecognitionLanguage {
  case afrikaans
  case albanian
  case amharic
  case arabic
  case assamese
  case azerbaijani
  case azerbaijaniCyrillic
  case basque
  case belarusian
  case bengali
  case bosnian
  case bulgarian
  case burmese
  case catalanAndValencian
  case cebuano
  case centralKhmer
  case chineseSimplified
  case chineseTraditional
  case croatian
  case czech
  case cherokee
  case danish
  case dutchFlemish
  case dzongkha
  case english
  case englishMiddle
  case esperanto
  case estonian
  case finnish
  case frankish
  case french
  case frenchMiddle
  case galician
  case georgian
  case georgianOld
  case german
  case greekAncient
  case greekModern
  case guajarati
  case haitian
  case hebrew
  case hindi
  case hungarian
  case icelandic
  case inuktitut
  case indonesian
  case italian
  case italianOld
  case irish
  case javanese
  case japanese
  case kannada
  case kazakh
  case korean
  case kurdish
  case kyrgyz
  case lao
  case latin
  case lithuanian
  case malayalam
  case macedonian
  case malay
  case maltese
  case marathi
  case nepali
  case norwegian
  case oriya
  case pashto
  case persian
  case polish
  case portugese
  case punjabi
  case romanian
  case russian
  case sanskrit
  case serbian
  case serbianLatin
  case sinhala
  case slovak
  case slovenian
  case spanish
  case spanishOld
  case swahili
  case swedish
  case syriac
  case tamil
  case tagalog
  case tajik
  case telugu
  case thai
  case tibetan
  case tigrinya
  case turkish
  case uighur
  case ukrainian
  case urdu
  case uzbek
  case uzbekCyrillic
  case vietnamese
  case welsh
  case yiddish
  case custom(Swift.String)
}
extension SwiftyTesseract.RecognitionLanguage : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public struct RecognizedBlock {
  public var text: Swift.String
  public var boundingBox: CoreGraphics.CGRect
  public var confidence: Swift.Float
}
public enum ResultIteratorLevel : libtesseract.TessPageIteratorLevel.RawValue {
  case block
  case paragraph
  case textline
  case word
  case symbol
  public var tesseractLevel: libtesseract.TessPageIteratorLevel {
    get
  }
  public init?(rawValue: libtesseract.TessPageIteratorLevel.RawValue)
  public typealias RawValue = libtesseract.TessPageIteratorLevel.RawValue
  public var rawValue: libtesseract.TessPageIteratorLevel.RawValue {
    get
  }
}
@_hasMissingDesignatedInitializers public class SwiftyTesseract {
  public var whiteList: Swift.String? {
    get
    set
  }
  public var blackList: Swift.String? {
    get
    set
  }
  public var preserveInterwordSpaces: Swift.Bool? {
    get
    set
  }
  public var minimumCharacterHeight: Swift.Int? {
    get
    set
  }
  public var version: Swift.String? {
    get
  }
  convenience public init(languages: [SwiftyTesseract.RecognitionLanguage], dataSource: SwiftyTesseract.LanguageModelDataSource = Bundle.main, engineMode: SwiftyTesseract.EngineMode = .lstmOnly)
  convenience public init(language: SwiftyTesseract.RecognitionLanguage, dataSource: SwiftyTesseract.LanguageModelDataSource = Bundle.main, engineMode: SwiftyTesseract.EngineMode = .lstmOnly)
  @available(*, deprecated, message: "migrate to init(language:dataSource:engineMode:)")
  convenience public init(language: SwiftyTesseract.RecognitionLanguage, bundle: Foundation.Bundle = .main, engineMode: SwiftyTesseract.EngineMode = .lstmOnly)
  @available(*, deprecated, message: "migrate to init(languages:dataSource:engineMode:)")
  convenience public init(languages: [SwiftyTesseract.RecognitionLanguage], bundle: Foundation.Bundle = .main, engineMode: SwiftyTesseract.EngineMode = .lstmOnly)
  @objc deinit
}
extension SwiftyTesseract.SwiftyTesseract {
  @available(*, deprecated, message: "use performOCR(on:) or performOCRPublisher(on:)")
  public func performOCR(on image: UIKit.UIImage, completionHandler: (Swift.String?) -> ())
  public func performOCR(on image: UIKit.UIImage) -> Swift.Result<Swift.String, Swift.Error>
  @available(iOS 13.0, *)
  public func performOCRPublisher(on image: UIKit.UIImage) -> Combine.AnyPublisher<Swift.String, Swift.Error>
}
extension SwiftyTesseract.SwiftyTesseract {
  public func createPDF(from images: [UIKit.UIImage]) throws -> Foundation.Data
}
extension SwiftyTesseract.SwiftyTesseract {
  public func recognizedBlocks(for level: SwiftyTesseract.ResultIteratorLevel) -> Swift.Result<[SwiftyTesseract.RecognizedBlock], Swift.Error>
}
extension SwiftyTesseract.SwiftyTesseract {
  public enum Error : Swift.Error {
    case imageConversionError
    case unableToExtractTextFromImage
    case unableToCreateRenderer
    case unableToBeginDocument
    case unableToProcessPage
    case unableToEndDocument
    case unableToRetrieveIterator
    public static func == (a: SwiftyTesseract.SwiftyTesseract.Error, b: SwiftyTesseract.SwiftyTesseract.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension SwiftyTesseract.EngineMode : Swift.Equatable {}
extension SwiftyTesseract.EngineMode : Swift.Hashable {}
extension SwiftyTesseract.EngineMode : Swift.RawRepresentable {}
extension SwiftyTesseract.ResultIteratorLevel : Swift.Equatable {}
extension SwiftyTesseract.ResultIteratorLevel : Swift.Hashable {}
extension SwiftyTesseract.ResultIteratorLevel : Swift.RawRepresentable {}
extension SwiftyTesseract.SwiftyTesseract.Error : Swift.Equatable {}
extension SwiftyTesseract.SwiftyTesseract.Error : Swift.Hashable {}
